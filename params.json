{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"GroupedScope","google":"UA-34687749-1","tagline":"Has Many Associations IN (GROUPS)","body":"# Has Many Associations IN (GROUPS)\r\n\r\n<img src=\"http://metaskills.net/assets/jack.png\" alt=\"Jack Has Many Things\" width=\"320\" height=\"214\" style=\"float:right; margin:0 0 15px 15px; background-color:#fff; padding:13px;\">\r\n\r\nGroupedScope provides an easy way to group objects and to allow those groups to share association collections via existing `has_many` relationships. You may enjoy my original article titled [*Jack has_many :things*](http://metaskills.net/2008/09/28/jack-has_many-things/).\r\n\r\n\r\n## Installation\r\n\r\nInstall the gem with bundler. We follow a semantic versioning format that tracks ActiveRecord's minor version. So this means to use the latest 3.2.x version of GroupedScope with any ActiveRecord 3.2 version.\r\n\r\n```ruby\r\ngem 'grouped_scope', '~> 3.2.0'\r\n```\r\n\r\n\r\n## Setup\r\n\r\nTo use GroupedScope on a model it must have a `:group_id` column.\r\n\r\n```ruby\r\nclass AddGroupId < ActiveRecord::Migration\r\n  def up\r\n    add_column :employees, :group_id, :integer\r\n  end\r\n  def down\r\n    remove_column :employees, :group_id\r\n  end\r\nend\r\n```\r\n\r\n\r\n## General Usage\r\n\r\nAssume the following model.\r\n\r\n```ruby\r\nclass Employee < ActiveRecord::Base\r\n  has_many :reports\r\n  grouped_scope :reports\r\nend\r\n```\r\n\r\nBy calling grouped_scope on any association you create a new group accessor for each \r\ninstance. The object returned will act just like an array and at least include the \r\ncurrent object that called it.\r\n\r\n```ruby\r\n@employee_one.group   # => [#<Employee id: 1, group_id: nil>]\r\n```\r\n\r\nTo group resources, just assign the same `:group_id` to each record in that group.\r\n\r\n```ruby\r\n@employee_one.update_attribute :group_id, 1\r\n@employee_two.update_attribute :group_id, 1\r\n@employee_one.group   # => [#<Employee id: 1, group_id: 1>, #<Employee id: 2, group_id: 1>]\r\n```\r\n\r\nCalling grouped_scope on the :reports association leaves the existing association intact.\r\n\r\n```ruby\r\n@employee_one.reports  # => [#<Report id: 2, employee_id: 1>]\r\n@employee_two.reports  # => [#<Report id: 18, employee_id: 2>, #<Report id: 36, employee_id: 2>]\r\n```\r\n\r\nNow the good part, all associations passed to the grouped_scope method can be called \r\non the group proxy. The collection will return resources shared by the group.\r\n\r\n```ruby\r\n@employee_one.group.reports # => [#<Report id: 2, employee_id: 1>, \r\n                                  #<Report id: 18, employee_id: 2>, \r\n                                  #<Report id: 36, employee_id: 2>]\r\n```\r\n\r\nYou can even call scopes or association extensions defined on the objects in the collection\r\ndefined on the original association. For instance:\r\n\r\n```ruby\r\n@employee.group.reports.urgent.assigned_to(user)\r\n```\r\n\r\n\r\n## Advanced Usage\r\n\r\nThe group scoped object can respond to either `blank?` or `present?` which checks the group's \r\ntarget `group_id` presence or not. We use this internally so that grouped scopes only use grouping\r\nSQL when absolutely needed.\r\n\r\n```ruby\r\n@employee_one = Employee.create :group_id => nil\r\n@employee_two = Employee.create :group_id => 38\r\n\r\n@employee_one.group.blank?   # => true\r\n@employee_two.group.present? # => true\r\n```\r\n\r\nThe object returned by the `#group` method is an ActiveRecord relation on the targets class, \r\nin this case `Employee`. Given this, you can further scope the grouped proxy if needed. Below,\r\nwe use the `:email_present` scope to refine the group down.\r\n\r\n```ruby\r\nclass Employee < ActiveRecord::Base\r\n  has_many :reports\r\n  grouped_scope :reports\r\n  scope :email_present, where(\"email IS NOT NULL\")\r\nend\r\n\r\n@employee_one = Employee.create :group_id => 5, :name => 'Ken'\r\n@employee_two = Employee.create :group_id => 5, :name => 'MetaSkills', :email => 'ken@metaskills.net'\r\n\r\n# Only one employee is returned now.\r\n@employee_one.group.email_present # => [#<Employee id: 1, group_id: 5, name: 'MetaSkills', email: 'ken@metaskills.net']\r\n```\r\n\r\nWe always use raw SQL to get the group ids vs. mapping them to an array and using those in scopes. \r\nThis means that large groups can avoid pushing down hundreds of keys in SQL form. So given an employee\r\nwith a `group_id` of `43` and calling `@employee.group.reports`, you would get something similar to\r\nthe following SQL.\r\n\r\n```sql\r\nSELECT \"reports\".* \r\nFROM \"reports\"  \r\nWHERE \"reports\".\"employee_id\" IN (\r\n  SELECT \"employees\".\"id\" \r\n  FROM \"employees\"  \r\n  WHERE \"employees\".\"group_id\" = 43\r\n)\r\n```\r\n\r\nYou can pass the group scoped object as a predicate to ActiveRecord's relation interface. In past \r\nversions, this would have treated the group object as an array of IDs. The new behavior is to return \r\na SQL literal to be used with IN statements. So note, the following would generate SQL similar to \r\nthe one above.\r\n\r\n```ruby\r\nEmployee.where(:group_id => @employee.group).all\r\n```\r\n\r\nIf you need more control and you are working with the group at a lower level, you can always \r\nuse the `#ids` or `#ids_sql` methods on the group.\r\n\r\n```ruby\r\n# Returns primary key array.\r\n@employee.group.ids # => [33, 58, 240]\r\n\r\n# Returns a Arel::Nodes::SqlLiteral object.\r\n@employee.group.ids_sql # => 'SELECT \"employees\".\"id\" FROM \"employees\"  WHERE \"employees\".\"group_id\" = 33'\r\n```\r\n\r\n\r\n## Todo List\r\n\r\n* Raise errors for :finder_sql/:counter_sql.\r\n* Add a user definable group_id schema.\r\n* Remove SelfGrouping#with_relation, has not yet proved useful.\r\n\r\n\r\n\r\n## Testing\r\n\r\nSimple! Just clone the repo, then run `bundle install` and `bundle exec rake`. The tests will begin to run. We also use Travis CI to run our tests too. Current build status is:\r\n\r\n[![Build Status](https://secure.travis-ci.org/metaskills/grouped_scope.png)](http://travis-ci.org/metaskills/grouped_scope)\r\n\r\n\r\n\r\n## License\r\n\r\nReleased under the MIT license.\r\nCopyright (c) 2011 Ken Collins\r\n\r\n"}